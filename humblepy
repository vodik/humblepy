#!/usr/bin/env python
"""
A Humble Indie Bundle webscraper / download manager.

Author:  Simon Gomizelj <simongmzlj@gmail.com>
License: GPL3
"""

import getopt
import sys, os
import configparser

from urllib.request import urlopen
from bs4 import BeautifulSoup

Targets = ["linux", "mac", "windows", "android", "audio"]

class Download():
    def __init__(self, bt, web, md5):
        self.bt  = bt
        self.web = web
        self.md5 = md5

class Game():
    def __init__(self, title, sub, url):
        self.title = title
        self.subtitle = sub
        self.url = url
        self.files = {}

class HumbleBundle():
    """
    Represent a Humble Indie Bundle and all its games.
    """
    def __init__(self, key):
        url = "https://www.humblebundle.com/downloads?key={0}".format(key)
        print("Opening:", url)
        html = urlopen(url)

        self.games = {}

        soup = BeautifulSoup(html.read())
        for row in soup.find_all("div", { "class" : "row" }):
            name, game = self.parse_game(row)
            self.games[name] = game

    def parse_game(self, row):
        """
        Extract the details of a Humble Indie Bundle game from the tags and metadata.
        """
        name  = row['class'][1]
        a     = row.find("div", { "class" : "title" }).contents[0]
        title = a.contents[0]
        url   = a['href']
        sub   = row.find("div", { "class" : "subtitle" }).contents[0].contents[0]
        game  = Game(title, sub, url)

        for target in Targets:
            files = []
            downloads = row.find("div", { "class" : target })
            for dl in downloads.find_all('a'):
                bt, web = None, None
                if 'data-bt' in dl.attrs:
                    bt = dl['data-bt']
                if 'data-web' in dl.attrs:
                    web = dl['data-web']
                if bt or web:
                    files.append(Download(bt, web, None))

                # if 'dlmd5' in dl['class']:
                #     print("MD5:       ", dl['href'])
            game.files[target] = files

        return name, game

def usage():
    pass

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "b:t:f:v", ["bundle=", "target=", "file=", "key=", "verbose", "as-root"])
    except getopt.GetoptError as err:
        print(err, file=sys.stderr)
        usage()
        sys.exit(2)

    keys = []
    root = False
    verbose = False
    targets = Targets

    config = configparser.ConfigParser()
    config.read('humblepy.cfg')

    if 'settings' in config:
        targets = config['settings']['targets'].split(',')

    for o, a in opts:
        if o in ("-b", "--bundle"):
            if 'keys' in config and a in config['keys']:
                keys.append(config['keys'][a])
            else:
                print("Bundle {} not found".format(a), file=sys.stderr)
        elif o in ("-t", "--target"):
            # TODO: verify targets
            targets = a.split(",")
        elif o in ("-k", "--key"):
            keys = a.split(",")
        elif o in ("-v", "--verbose"):
            verbose = True
        elif o == "--as-root":
            root = True
        else:
            assert False, "unhandled option"

    if not root and os.geteuid() == 0:
        print("Running as root requires --as-root", file=sys.stderr)
        sys.exit(1)

    for key in keys:
        bundle = HumbleBundle(key)

        for name, game in bundle.games.items():
            print(name, game.title)
            print(game.url)
            print()

            for target in targets:
                for dl in game.files[target]:
                    print(dl.web)
            print()

if __name__ == "__main__":
    main()
